// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © zeubetella

//@version=5
indicator("Sıkıştırılmış İndikatör Paketi")

show_rsi  = input(false)
show_macd = input(false)
show_ma1  = input(false)
show_ma2  = input(false)
show_ma3  = input(false)
show_ma4  = input(false)
show_ma5  = input(false)

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

rsiPlot = plot(show_rsi ? rsi : na, "RSI", color=#7E57C2)
plot(show_rsi ? rsiMA : na, "RSI-based MA", color=color.yellow)

rsiUpperBand = hline(show_rsi ? 70 : na, "RSI Upper Band", color=#787B86)
midline      = hline(show_rsi ? 50 : na, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(show_rsi ? 30 : na , "RSI Lower Band", color=#787B86)

fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")

midLinePlot = plot(show_rsi ? 50 : na, color = na, editable = false, display = display.none)
fill(rsiPlot, midLinePlot, 100, 70, top_color = color.new(color.green, 0), bottom_color = color.new(color.green, 100),  title = "Overbought Gradient Fill")
fill(rsiPlot, midLinePlot, 30,  0,  top_color = color.new(color.red, 100), bottom_color = color.new(color.red, 0),      title = "Oversold Gradient Fill")

// ====================================================================================================================================================================================

// Getting inputs
fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
hline(show_macd ? 0 : na, "Zero Line", color=color.new(#787B86, 50))
plot(show_macd ? hist : na, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(show_macd ? macd : na, title="MACD", color=col_macd)
plot(show_macd ? signal : na, title="Signal", color=col_signal)

// ====================================================================================================================================================================================

source_for_moving_averages = close

// Ekranımızda yer alacak birinci MA için hesaplamaların yapıldığı ksım.
// This is where the calculations for the first moving average (MA) that will appear on our screen are performed.

ma1(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput1 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput1 = input.int(9, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma2(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput2 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput2 = input.int(20, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma3(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput3 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput3 = input.int(50, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma4(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput4 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput4 = input.int(100, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma5(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput5 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput5 = input.int(200, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

maline1 = ma1(source_for_moving_averages, maLengthInput1, maTypeInput1)
maline2 = ma2(source_for_moving_averages, maLengthInput2, maTypeInput2)
maline3 = ma3(source_for_moving_averages, maLengthInput3, maTypeInput3)
maline4 = ma4(source_for_moving_averages, maLengthInput4, maTypeInput4)
maline5 = ma5(source_for_moving_averages, maLengthInput5, maTypeInput5)

plot(show_ma1 ? maline1 : na, title='Birinci MA Çizgisi / First MA Line', color=color.new(color.yellow, 0), linewidth=1, display = display.pane)
plot(show_ma2 ? maline2 : na, title='İkinci MA Çizgisi / Second MA Line', color=color.new(color.white, 0), linewidth=1, display = display.pane)
plot(show_ma3 ? maline3 : na, title='Üçüncü MA Çizgisi / Third MA Line', color=color.new(color.blue, 0), linewidth=1, display = display.pane)
plot(show_ma4 ? maline4 : na, title='Dördüncü MA Çizgisi / Fourth MA Line', color=color.new(color.red, 0), linewidth=1, display = display.pane)
plot(show_ma5 ? maline5 : na, title='Beşinci MA Çizgisi / Fifth MA Line', color=color.new(color.orange, 0), linewidth=1, display = display.pane)

// ====================================================================================================================================================================================

