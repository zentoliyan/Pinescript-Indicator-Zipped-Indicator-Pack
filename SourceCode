// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © zeubetella

//@version=5
indicator("Sıkıştırılmış İndikatör Paketi")

// ====================================================================================================================================================================================

show_rsi       = input(false, title = "RSI")
show_macd      = input(false, title = "MACD")
show_vol       = input(false, title = "Hacim")
show_stoch     = input(false, title = "Stokastik")
show_stoch_rsi = input(false, title = "Stokastik RSI")
show_adx       = input(false, title = "ADX")
show_dmi       = input(false, title = "DMI")
show_cci       = input(false, title = "CCI")
show_mom       = input(false, title = "Momentum")
show_rott      = input(false, title = "ROTT")
show_risotto   = input(false, title = "RISOTTO")
show_ma1       = input(false, title = "MA1", inline = "MA")
show_ma2       = input(false, title = "MA2", inline = "MA")
show_ma3       = input(false, title = "MA3", inline = "MA")
show_ma4       = input(false, title = "MA4", inline = "MA")
show_ma5       = input(false, title = "MA5", inline = "MA")

// ====================================================================================================================================================================================

rsi_group       = "RSI Ayarları"
macd_group      = "MACD Ayarları"
vol_group       = "Hacim Ayarları"
stoch_group     = "Stokastik Ayarları"
stoch_rsi_group = "Stokastrik RSI Ayarları"
adx_group       = "ADX Ayarları"
cci_group       = "CCI ayarları"
mom_group       = "Momentum Ayarları"

// ====================================================================================================================================================================================

ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

rsiLengthInput = input.int(14, minval=1, title="RSI Length", group=rsi_group)
rsiSourceInput = input.source(close, "Source", group=rsi_group)
maTypeInput    = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=rsi_group)
maLengthInput  = input.int(14, title="MA Length", group=rsi_group)
bbMultInput    = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group=rsi_group)

up    = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down  = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi   = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB  = maTypeInput == "Bollinger Bands"

rsiPlot = plot(show_rsi ? rsi : na, "RSI", color=#7E57C2)
plot(show_rsi ? rsiMA : na, "RSI-based MA", color=color.yellow)

rsiUpperBand = hline(show_rsi ? 70 : na, "RSI Upper Band", color=#787B86)
midline      = hline(show_rsi ? 50 : na, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(show_rsi ? 30 : na , "RSI Lower Band", color=#787B86)

fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")

midLinePlot = plot(show_rsi ? 50 : na, color = na, editable = false, display = display.none)
fill(rsiPlot, midLinePlot, 100, 70, top_color = color.new(color.green, 0), bottom_color = color.new(color.green, 100),  title = "Overbought Gradient Fill")
fill(rsiPlot, midLinePlot, 30,  0,  top_color = color.new(color.red, 100), bottom_color = color.new(color.red, 0),      title = "Oversold Gradient Fill")

// ====================================================================================================================================================================================

// Getting inputs
fast_length   = input(title="Fast Length", defval=12, group = macd_group)
slow_length   = input(title="Slow Length", defval=26, group = macd_group)
src           = input(title="Source", defval=close, group = macd_group)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9, group = macd_group)
sma_source    = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"], group = macd_group)
sma_signal    = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"], group = macd_group)
// Plot colors
col_macd       = input(#2962FF, "MACD Line  ", group=macd_group, inline="MACD")
col_signal     = input(#FF6D00, "Signal Line  ", group=macd_group, inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group=macd_group, inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group=macd_group, inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group=macd_group, inline="Below")
col_fall_below = input(#FF5252, "Fall", group=macd_group, inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd    = fast_ma - slow_ma
signal  = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist    = macd - signal
hline(show_macd ? 0 : na, "Zero Line", color=color.new(#787B86, 50))
plot(show_macd ? hist : na, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(show_macd ? macd : na, title="MACD", color=col_macd)
plot(show_macd ? signal : na, title="Signal", color=col_signal)

buycond  = ta.crossover(macd,signal)
sellcond = ta.crossover(signal,macd)

plot1 = macd
plot2 = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)

// Giriş Sinyalleri
signals = input.bool(defval=true, title="Signals")
plotshape(show_macd ? (signals ? buycond==1  ? plot1 : na : na) : na, title='MACD Buy Point',  location=location.absolute, style=shape.circle, size=size.tiny, color = color.rgb(0, 255, 8), editable=true)
plotshape(show_macd ? (signals ? sellcond==1 ? plot1 : na : na) : na, title='MACD Sell Point', location=location.absolute, style=shape.circle, size=size.tiny, color = #ff0000, editable=true)

// ====================================================================================================================================================================================

source_for_moving_averages = close

// Ekranımızda yer alacak birinci MA için hesaplamaların yapıldığı ksım.
// This is where the calculations for the first moving average (MA) that will appear on our screen are performed.

ma1(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput1 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput1 = input.int(9, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma2(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput2 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput2 = input.int(20, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma3(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput3 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput3 = input.int(50, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma4(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput4 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput4 = input.int(100, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

ma5(source_for_moving_averages, length, type) =>
    switch type
        "WMA" => ta.wma(source_for_moving_averages, length)
        "EMA" => ta.ema(source_for_moving_averages, length)
        "SMA" => ta.sma(source_for_moving_averages, length)
        "VWMA" => ta.vwma(source_for_moving_averages, length)

maTypeInput5 = input.string("EMA", title="MA Türü / MA Type", options=["WMA","EMA","SMA","VWMA"], group="MA Ayarları / MA Settings")
maLengthInput5 = input.int(200, title="MA Periyodu / MA Period", group="MA Ayarları / MA Settings")

maline1 = ma1(source_for_moving_averages, maLengthInput1, maTypeInput1)
maline2 = ma2(source_for_moving_averages, maLengthInput2, maTypeInput2)
maline3 = ma3(source_for_moving_averages, maLengthInput3, maTypeInput3)
maline4 = ma4(source_for_moving_averages, maLengthInput4, maTypeInput4)
maline5 = ma5(source_for_moving_averages, maLengthInput5, maTypeInput5)

plot(show_ma1 ? maline1 : na, title='Birinci MA Çizgisi / First MA Line',   color=color.new(color.yellow, 0), linewidth=1, display = display.pane)
plot(show_ma2 ? maline2 : na, title='İkinci MA Çizgisi / Second MA Line',   color=color.new(color.white, 0),  linewidth=1, display = display.pane)
plot(show_ma3 ? maline3 : na, title='Üçüncü MA Çizgisi / Third MA Line',    color=color.new(color.blue, 0),   linewidth=1, display = display.pane)
plot(show_ma4 ? maline4 : na, title='Dördüncü MA Çizgisi / Fourth MA Line', color=color.new(color.red, 0),    linewidth=1, display = display.pane)
plot(show_ma5 ? maline5 : na, title='Beşinci MA Çizgisi / Fifth MA Line',   color=color.new(color.orange, 0), linewidth=1, display = display.pane)

// ====================================================================================================================================================================================


volume_variable = volume
volume_ma_input = input.int(20, title = "Volume Moving Average Period", group = vol_group)

plot(show_vol ? volume_variable: na, color = close>open ? color.new(color.green,50) : color.new(color.red,50), style = plot.style_columns)
plot(show_vol ? ta.sma(volume_variable,volume_ma_input) : na, color = color.white)

// ====================================================================================================================================================================================

periodK = input.int(14, title="%K Length", minval=1, group = stoch_group)
smoothK = input.int(1, title="%K Smoothing", minval=1, group = stoch_group)
periodD = input.int(3, title="%D Smoothing", minval=1, group = stoch_group)
k_stoch = ta.sma(ta.stoch(close, high, low, periodK), smoothK)
d_stoch = ta.sma(k_stoch, periodD)

plot(show_stoch ? k_stoch : na, title="%K", color=#2962FF)
plot(show_stoch ? d_stoch : na, title="%D", color=#FF6D00)
h0 = hline(show_stoch ? 80 : na, "Upper Band", color=#787B86)
hline(show_stoch ? 50 : na, "Middle Band", color=color.new(#787B86, 50))
h1 = hline(show_stoch ? 20 : na, "Lower Band", color=#787B86)
fill(h0, h1, color=color.rgb(33, 150, 243, 90), title="Background")

// ====================================================================================================================================================================================

smoothK_rsi   = input.int(3, "K", minval=1, group = stoch_rsi_group)
smoothD_rsi   = input.int(3, "D", minval=1, group = stoch_rsi_group)
lengthRSI     = input.int(14, "RSI Length", minval=1, group = stoch_rsi_group)
lengthStoch   = input.int(14, "Stochastic Length", minval=1, group = stoch_rsi_group)
src_stoch_rsi = input(close, title="RSI Source", group = stoch_rsi_group)
rsi1          = ta.rsi(src, lengthRSI)
k_stoch_rsi   = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d_stoch_rsi   = ta.sma(k_stoch_rsi, smoothD_rsi)

plot(show_stoch_rsi ? k_stoch_rsi : na, "K", color=#2962FF)
plot(show_stoch_rsi ? d_stoch_rsi : na, "D", color=#FF6D00)
h0_stoch_rsi = hline(show_stoch_rsi ? 80 : na, "Upper Band", color=#787B86)
hline(show_stoch_rsi ? 50 : na, "Middle Band", color=color.new(#787B86, 50))
h1_stoch_rsi = hline(show_stoch_rsi ? 20 : na, "Lower Band", color=#787B86)
fill(h0_stoch_rsi, h1_stoch_rsi, color=color.rgb(33, 150, 243, 90), title="Background")

// ====================================================================================================================================================================================

adxlen = input(14, title="ADX Smoothing", group = adx_group)
dilen  = input(14, title="DI Length", group = adx_group)
dirmov(len) =>
	up = ta.change(high)
	down = -ta.change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = ta.rma(ta.tr, len)
	plus = fixnan(100 * ta.rma(plusDM, len) / truerange)
	minus = fixnan(100 * ta.rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)

plot(show_adx ? sig : na, color=color.red, title="ADX")

// ====================================================================================================================================================================================

len_mom = input.int(10, minval=1, title="Length", group = mom_group)
src_mom = input(close, title="Source", group = mom_group)
mom = src - src_mom[len_mom]
plot(show_mom ? mom : na, color=#2962FF, title="MOM")

// ====================================================================================================================================================================================

length_cci = input.int(20, minval=1, group = cci_group)
src_cci = input(hlc3, title="Source", group = cci_group)
ma_cci = ta.sma(src_cci, length_cci)
cci = (src - ma_cci) / (0.015 * ta.dev(src_cci, length_cci))

plot(show_cci ? cci : na, "CCI", color=#2962FF)
band1 = hline(show_cci ? 100 : na, "Upper Band", color=#787B86, linestyle=hline.style_dashed)
hline(show_cci ? 0 : na, "Middle Band", color=color.new(#787B86, 50))
band0 = hline(show_cci ? -100 : na, "Lower Band", color=#787B86, linestyle=hline.style_dashed)
fill(band1, band0, color=color.rgb(33, 150, 243, 90), title="Background")

ma_cci(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

typeMA = input.string(title = "Method", defval = "SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Smoothing")
smoothingLength = input.int(title = "Length", defval = 5, minval = 1, maxval = 100, group="Smoothing")

smoothingLine = ma_cci(cci, smoothingLength, typeMA)
plot(show_cci ? smoothingLine : na, title="Smoothing Line", color=#f37f20, display=display.none)

// ====================================================================================================================================================================================

X1 = input(30,   tooltip = "The standart value is 30")
X2 = input(1000, title = "VAR Length", tooltip = "The standart value is 1000 \nCan be decreased / increased by step value of 100")

f_var(data,u1) =>
    a = 9
    b = data > data[1] ? data - data[1] : 0
    c = data < data[1] ? data[1] - data : 0
    d = math.sum(b , a)
    e = math.sum(c , a)
    f = nz((d - e) / (d + e))
    g = math.abs(f)
    h = 2 / (u1 + 1)
    x = ta.sma(data , u1)
    vidya = 0.0
    vidya :=
     u1==1 ? data : na(vidya[1]) ? x :
     g * h * (data - nz(vidya[1])) + nz(vidya[1])
   
perfect_ma2 = 2 * f_var(close , X2)

OTT(source, length, percent) =>
    MAVG = f_var(source, length)
    fark = MAVG * percent * 0.01
    longStop = MAVG - fark
    longStopPrev = nz(longStop[1], longStop)
    longStop := MAVG > longStopPrev ? math.max(longStop, longStopPrev) : longStop
    shortStop = MAVG + fark
    shortStopPrev = nz(shortStop[1], shortStop)
    shortStop := MAVG < shortStopPrev ? math.min(shortStop, shortStopPrev) : shortStop
    dir = 1
    dir := nz(dir[1], dir)
    dir := dir == -1 and MAVG > shortStopPrev ? 1 : dir == 1 and MAVG < longStopPrev ? -1 : dir
    MT = dir == 1 ? longStop : shortStop
    OTT = MAVG > MT ? MT * (200 + percent) / 200 : MT * (200 - percent) / 200
    out = nz(OTT[2])

length_ott  = input.int(30,    'OTT Period',  minval=1, tooltip = "The standart value is same with the X1 parameter")
percent_ott = input.float(7.0, 'OTT Percent', step=0.1, minval=0, tooltip = "The standart value is 7")

ott = OTT(perfect_ma2 , length_ott , percent_ott)

bar_cond0 = ta.barssince(ta.crossover(perfect_ma2 , ott))
bar_cond1 = ta.barssince(ta.crossover(ott , perfect_ma2))

plot_rott_support = plot(show_rott ? perfect_ma2 : na, color= color.new(#31e7ff, 0),  title="SUPPORT")
plot_rott = plot(show_rott ? ott : na,         color= color.rgb(217, 0, 255), title="ROTT")

// ====================================================================================================================================================================================

lensig_dmi = input.int(14, title="ADX Smoothing", minval=1, maxval=50)
len_dmi    = input.int(14, minval=1, title="DI Length")
up_dmi     = ta.change(high)
down_dmi   = -ta.change(low)
plusDM     = na(up) ? na : (up > down and up > 0 ? up : 0)
minusDM    = na(down) ? na : (down > up and down > 0 ? down : 0)
trur       = ta.rma(ta.tr, len_dmi)
plus       = fixnan(100 * ta.rma(plusDM, len_dmi) / trur)
minus      = fixnan(100 * ta.rma(minusDM, len_dmi) / trur)
sum        = plus + minus
adx        = 100 * ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), lensig_dmi)

plot(show_dmi ? adx   : na, color=#F50057, title="ADX")
plot(show_dmi ? plus  : na, color=#2962FF, title="+DI")
plot(show_dmi ? minus : na, color=#FF6D00, title="-DI")

// ====================================================================================================================================================================================
